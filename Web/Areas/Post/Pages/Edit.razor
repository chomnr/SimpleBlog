@page "/post/edit/{postId:int}"
@using Application.Features.Post
@using MediatR
@using Application.Entities
@using Newtonsoft.Json
@using System.Security.Claims
@inject IMediator Mediator;
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager;
@inject AuthenticationStateProvider AuthenticationStateProvider

<CascadingAuthenticationState>
    <section class="blg-section" style="padding-left: 25px;padding-right: 25px;">
        <div class="blg-child-node col" style="color: #eae7e1;align-items: center;justify-content: center;">
            <AuthorizeView Context="authorize">

            @if (PostId != null && PostInfo != null)
            {
                <h1 class="section-title with-divider"><span style="color: #242424">#</span> EDIT POST <span style="color: #FDD835;">@PostInfo.Title</span></h1>
                <input id="title-proxy" class="section-title" @bind-value="@_editPost.Title" placeholder="TITLE"/>
                <div style="display:flex;width: 100%;justify-content: start;align-items: center">
                    <ul id="tags-display" class="selectable-tags"></ul>
                    <input id="tags-proxy" bind-value="@_editPost.Tags" class="section-tags" placeholder="Tags"/>
                </div>
                <article class="view-post">
                    <EditForm Model="@_editPost" OnValidSubmit="@SubmitEventHandler">
                        <DataAnnotationsValidator/>
                        <ValidationMessage For="@(() => _editPost.Title)"/>
                        <ValidationMessage For="@(() => _editPost.Body)"/>
                        <ValidationMessage For="@(() => _editPost.Tags)"/>
                        <div>
                            <div id="editor">
                                @PostBody
                            </div>
                        </div>
                        <input type="text" class="form-control" id="Input_PostId" @bind-value="@_editPost.PostId" hidden/>
                        <input type="text" class="form-control" id="Input_Title" @bind-value="@_editPost.Title" hidden/>
                        <input type="text" id="Input_Body" @bind-value="@_editPost.Body" hidden/>
                        <input type="text" id="Input_Tags" @bind-value="@_editPost.Tags" hidden/>
                        <button type="submit" style="width: 100%;" class="dark" aria-hidden="true">Save Changes</button>
                    </EditForm>
                </article>
            }
            </AuthorizeView>
        </div>
    </section>
</CascadingAuthenticationState>

<style>
    .ql-toolbar.ql-snow { 
        border: 0; !important; 
        border-left: 2px solid var(--accent-color);
        background: var(--light-black);
        color: var(--dirty-red);
    }
    
    .ql-container.ql-snow { 
        border: 0; !important;
        border-left: 2px solid var(--accent-color)
    }
    
    .ql-toolbar .ql-stroke {
        fill: none;
        stroke: var(--dirty-red);
    }
    
    .ql-toolbar .ql-fill {
        fill: var(--dirty-red);
        stroke: none;
    }
    
    .ql-toolbar .ql-picker {
        color: var(--dirty-red);
    }
</style>

@code {
    [Parameter]
    public int PostId { get; set; }
    private static Post PostInfo { get; set; }

    private MarkupString PostBody { get; set; }
    
    private static EditPostCommand _editPost = new EditPostCommand();
    
    private static void UpdateTitle(string title)
    {
        _editPost.Title = title;
    }
    
    [JSInvokable]
    public static void UpdateTags(string tags)
    {
        _editPost.Tags = tags;
    }

    [JSInvokable]
    public static string GetDefaultTags()
    {
        return JsonConvert.SerializeObject(PostInfo.Tags);
    }

    [JSInvokable]
    public static void UpdateBody(string body)
    {
        _editPost.Body = body;
    }

    private async Task LoadPostInfo()
    {
        var command = new RetrievePostCommand{ Id = PostId };
        var response = await Mediator.Send(command);
        _editPost.PostId = PostId;
        
        if (response.Value != null)
        {
            PostInfo = JsonConvert.DeserializeObject<Post>(response.Value.ToString());
            PostBody = new MarkupString(PostInfo.Body);
            
            UpdateTitle(PostInfo.Title);
            UpdateBody(PostInfo.Body);
            UpdateTags(JsonConvert.SerializeObject(PostInfo.Tags));
        }
    }
    
    private async Task SubmitEventHandler(EditContext context)
    {
        if (context.Validate())
        {
            if (string.IsNullOrEmpty(_editPost.Tags))
            {
                _editPost.Tags = GetDefaultTags();
            }

            Console.WriteLine(context.Model);
            var response = await Mediator.Send(_editPost);
            
            if (response)
            {
                NavManager.NavigateTo(NavManager.BaseUri + "post/" + PostId);
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authenticationState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        
        if (userId == null) { NavManager.NavigateTo(NavManager.BaseUri); }
        await LoadPostInfo();
        if (!userId.Equals(PostInfo.UserId)) {NavManager.NavigateTo(NavManager.BaseUri); }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // fixes a bug hacky but it works. (editor gets loaded before the #editor div. this fixes that.)
        await Task.Delay(100);
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("eval", @"
    const toolbarOptions = [
        [{ 'header': [1, 2, false] }, { 'font': [] }],
        ['bold', 'italic', 'underline', 'strike', 'blockquote'],
        [{'list': 'ordered'}, {'list': 'bullet'}, 
        {'indent': '-1'}, {'indent': '+1'}],
        ['link', 'image', 'video', 'code'],
        ['clean']                                        
    ];
    var options = {
        modules: {
            toolbar: toolbarOptions
        },
        placeholder: 'Compose an epic...',
        theme: 'snow'
    };

    let quill = new Quill('#editor', options);

    quill.getModule('toolbar').addHandler('image', function() {
        var url = prompt('Enter the image URL:');
        if (url) {
            quill.focus();
            var range = quill.getSelection();
            quill.insertEmbed(range.index, 'image', url);
        }
    });

    let body = document.getElementById('Input_Body');
    let body_proxy = quill.root;

    quill.on('text-change', function() {
        DotNet.invokeMethodAsync('Web', 'UpdateBody', body_proxy.innerHTML);
        body.value = body_proxy.innerHTML;
    });

    let tags = document.getElementById('Input_Tags');
    let tags_proxy = document.getElementById('tags-proxy');
    let tags_display = document.getElementById('tags-display');
    let tags_list = [];

    const MAX_TAGS = 4;
    const MAX_TAG_NAME_LENGTH = 15;
    const MIN_TAG_NAME_LENGTH = 3;

    DotNet.invokeMethodAsync('Web', 'GetDefaultTags')
            .then(data => {
                tags_list = JSON.parse(data);
            for (let i = 0; i < tags_list.length; i++) {
                addTag(tags_list[i].toUpperCase());
            }
    });

    tags_proxy.addEventListener('keydown', function(e) {
        if (e.key === ',') {
            let target = e.target.value;
            e.preventDefault();
            if (
                target.length >= MIN_TAG_NAME_LENGTH &&
                target.length <= MAX_TAG_NAME_LENGTH &&
                tags_list.length < MAX_TAGS &&
                !tags_list.includes(target) &&
                tags_proxy.value.length !== 0
            ) {
                console.log(tags_list);
                tags_list.push(e.target.value);
                addTag(e.target.value.toUpperCase());
                e.target.value = '';
            }
        }
    });

    tags_display.addEventListener('click', function(e) {
        if (e.target.tagName === 'LI') {
            let index = e.target.id.replace('tag-', '');
            tags_list.splice(index, 1);
            e.target.remove();
            refreshTags();
        }
    });

    function reloadTags() {
        tags_proxy.value = '';
        tags.value = '';
        tags_display.innerHTML = '';
        DotNet.invokeMethodAsync('Web', 'UpdateTags', tags.value);
    }

    function addTag(tag) {
        let a = document.createElement('li');
        a.textContent = tag.replace(' ', '\u00A0').toUpperCase();
        tags_display.appendChild(a);
        tags.value = JSON.stringify(tags_list);
        DotNet.invokeMethodAsync('Web', 'UpdateTags', tags.value);
    }

    function refreshTags() {
        reloadTags();
        for (let i = 0; i < tags_list.length; i++) {
            addTag(tags_list[i]);
        }}");
            
        }
    }
}