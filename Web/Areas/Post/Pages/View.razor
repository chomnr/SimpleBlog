@page "/post/{postId:int}"
@using MediatR
@using System.Text
@using System.Text.RegularExpressions
@using Application.Common
@using Application.Entities
@using Application.Features.Post
@using Microsoft.AspNetCore.Mvc.Rendering
@using Newtonsoft.Json
@inject IMediator Mediator;
@inject IHtmlHelper Html
@inject NavigationManager NavigationManager

<section class="blg-section" style="padding-left: 25px;padding-right: 25px;">
    <div class="blg-child-node col" style="color: #eae7e1;align-items: center;justify-content: center;">
        @if (PostInfo != null)
        {
            <h1 class="section-title with-divider" style="word-break: break-all"><span style="color: #242424">#</span> @StripHtmlTags(@PostInfo.Title)</h1>
            <article class="view-post">
                <div class="author-bar">
                    <img class="avatar" width="35" height="35" src="https://place-hold.it/30x30"/>
                    <div class="mini-col" >
                        <div class="name"><a style="color:inherit;text-decoration: none;" href="account/@PostInfo.UserId">@PostInfo.Username</a></div>
                        <div class="published">@PostHelper.GetDate(long.Parse(PostInfo.DateCreated))</div>
                    </div>
                    <ul class="view-tags" style="margin-left: auto">
                        @if (PostInfo.Tags != null)
                        {
                            @foreach (var tag in PostInfo.Tags)
                            {
                                <li><a style="color:inherit;text-decoration: none;" href="post/tag/@tag">@tag</a></li>
                            }
                        }
                        <li class="read-time"><a style="color:inherit;text-decoration: none;"></a>@GetReadTime(PostInfo.Body) min read</li>
                    </ul>
                </div>
                @HtmlContent
            </article>

        }
    </div>
</section>

@code {
    private Post PostInfo;

    [Parameter]
    public int PostId { get; set; }

    public MarkupString HtmlContent { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var command = new RetrievePostCommand
        {
            Id = PostId
        };

        var result = await Mediator.Send(command);
        if (result.Value != null)
        {
            PostInfo = JsonConvert.DeserializeObject<Post>(result.Value.ToString());
            Console.WriteLine(PostInfo.Title);
            HtmlContent = new MarkupString(PostInfo.Body);
        }
    }
    
    private string StripHtmlTags(string html)
    {
        return Regex.Replace(html, "<.*?>", "");
    }
    
    private double GetReadTime(string body, int wpm = 183)
    {
        var strippedBody = StripHtmlTags(body);
        var words = strippedBody.Trim().Split(' ').Length;
        var time = Math.Ceiling((double)words / wpm);
        return time;
    }
}