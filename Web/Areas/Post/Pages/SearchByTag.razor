@page "/post/tag/{tag}"
@using Application.Features.Post
@using MediatR
@using Newtonsoft.Json
@using Application.Entities
@inject IMediator Mediator;

<section class="blg-section" style="padding-left: 25px;padding-right: 25px;">
    <div class="blg-child-node col" style="color: #eae7e1;">
        <h1 class="section-title with-divider" style="word-break: break-all"><span style="color: #242424">#</span> FILTER BY TAG <span style="color: #FDD835">@Tag.ToUpper()</span></h1>
        @if (PostTagData != null)
        {
            @foreach (var post  in PostTagData)
            {
                <article id="post-@post.Id" class="sub-post">
                    <div class="post-author"><a style="color:inherit;text-decoration: none;" href="account/@post.UserId">@post.Username</a></div>
                    <div class="post-date">@GetDate(long.Parse(post.DateCreated))</div>
                    <div class="post-title"><a style="color:inherit;text-decoration: none;" href="post/@post.Id">@post.Title</a></div>
                    <ul class="post-tags">
                        <li><a style="color:inherit;text-decoration: none;">@Tag</a></li>
                    </ul>
                </article>
            }
        }
    </div>
</section>

@code {
    private int Page { get; set; }
    private int PreviousPage { get; set; }
    private int TotalPages { get; set; }
    
    [Parameter]
    public string Tag { get; set; }
    
    public List<Post> PostTagData { get; set; }
    
    public class CustomPostView
    {
        public List<Post> AllPosts { get; set; }
        public int PageCount { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        var command = new RetrievePostsByTagCommand
        {
            Page = 1,
            Tag = Tag
        };
        
        var response = await Mediator.Send(command);
        if (response.Value != null)
        {
            var result = JsonConvert.DeserializeObject<CustomPostView>(response.Value.ToString());

            PostTagData = result.AllPosts;
            TotalPages = result.PageCount;
        }
    }
    
    private string GetDate(long milliseconds)
    {
        DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeMilliseconds(milliseconds);

        return dateTimeOffset.ToString("dd MMM yyyy");
    }
}