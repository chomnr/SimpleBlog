@page "/"
@using MediatR
@using Application.Features.Post
@using Application.Entities
@using Newtonsoft.Json
@using System.Text
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.WebUtilities
@inject IMediator Mediator;
@inject NavigationManager navManager;

<PageTitle>Index</PageTitle>

<section class="blg-section" style="padding-left: 25px;padding-right: 25px;">
    <div class="blg-child-node col" style="color: #eae7e1;align-items: center;justify-content: center;">
        <h1 class="section-title with-divider">
            <span style="color: #242424">#</span> LATEST POSTS
        </h1>
        @if (PostsData != null)
        {
            @foreach (var post in PostsData)
            {
                <article id="post-@post.Id" class="sub-post">
                    <div class="post-author"><a style="color:inherit;text-decoration: none;" href="account/@post.UserId">@post.Username</a></div>
                    <div class="post-date">@GetDate(long.Parse(post.DateCreated))</div>
                    <div class="post-title"><a style="color:inherit;text-decoration: none;" href="post/@post.Id">@post.Title</a></div>
                    <ul class="post-tags">
                        @if (post.Tags != null)
                        {
                            @foreach (var tag in post.Tags)
                            {
                                <li><a style="color:inherit;text-decoration: none;" href="post/tag/@tag">@tag</a></li>
                            }
                        }
                    </ul>
                </article>
            }
            <div class="pagination" >
                @if (TotalPages != 0)
                {
                    if (Page > 1)
                    {
                        <a href="/?page=@(Page-1)" @onclick="UpdatePostsViewByPage">Previous</a>
                    }
                    for (var i = 1; i < TotalPages; i++)
                    {
                        if (i < 6)
                        {
                            if (Page == i)
                            {
                                <a href="/?page=@(i)" class="active" @onclick="UpdatePostsViewByPage">@(i)</a>
                            }
                            else
                            {
                                <a href="/?page=@(i)" @onclick="UpdatePostsViewByPage">@(i)</a>
                            }
                        }
                    }
                    if (Page == TotalPages)
                    {
                        <a href="/?page=@(TotalPages)" class="active" @onclick="UpdatePostsViewByPage">@(TotalPages)</a>
                    }
                    else
                    {
                        <a href="/?page=@(TotalPages)" @onclick="UpdatePostsViewByPage">@(TotalPages)</a>
                    }
                    
                    if (Page != TotalPages)
                    {
                        <a href="/?page=@(Page+1)" @onclick="UpdatePostsViewByPage">></a>
                    }
                }
            </div>
        }
    </div>
</section>

@code {

    private int Page { get; set; } = 1;
    private int PreviousPage { get; set; }
    private int TotalPages { get; set; }

    private List<Post> PostsData { get; set; }

    public class CustomPostView
    {
        public List<Post> AllPosts { get; set; }
        public int PageCount { get; set; }
    }

    private void UpdatePostView(List<Post> data)
    {
        PostsData = data;
    }

    private void UpdateTotalPage(int amount)
    {
        TotalPages = amount;
    }

    private async void UpdatePostsViewByPage()
    {
        await Task.Delay(50);
        var uri = new Uri(navManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
        if (queryParams["page"] != null)
        {
            
            Page = int.Parse(queryParams["page"]);
            
            if (PreviousPage == Page){ return; }

            PreviousPage = Page;
            
            var command = new RetrievePostsCommand { Page = Page };
            var response = await Mediator.Send(command);
            var result = JsonConvert.DeserializeObject<CustomPostView>(response.Value.ToString());
            
            if (result != null)
            {
                UpdatePostView(result.AllPosts);
                StateHasChanged();
            }
        }
    /*
        var absolute = navManager.ToAbsoluteUri(navManager.Uri);
        
        Console.Write("OUT");
        if (QueryHelpers.ParseQuery(absolute.Query).TryGetValue("page", out var param))
        {
            Page = int.Parse(param.First());
            var command = new RetrievePostsCommand { Page = this.Page };
            var response = await Mediator.Send(command);
            var result = JsonConvert.DeserializeObject<CustomPostView>(response.Value.ToString());
            Console.WriteLine("3");
            if (result != null)
            {
                Console.WriteLine("4");
                UpdatePostView(result.AllPosts);
            }
        }
        */
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        if (queryParams["page"] != null)
        {
            Page = int.Parse(queryParams["Page"]);
        }
        else
        {
            Page = 1;
        }

        var command = new RetrievePostsCommand { Page = Page };
        var response = await Mediator.Send(command);
        var result = JsonConvert.DeserializeObject<CustomPostView>(response.Value.ToString());

        if (result != null)
        {
            PreviousPage = Page;
            UpdatePostView(result.AllPosts);
            UpdateTotalPage(result.PageCount);
        }
        Console.WriteLine("RAN INIT ASYNC ");
    }
    

    private string GetDate(long milliseconds)
    {
        DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeMilliseconds(milliseconds);

        return dateTimeOffset.ToString("dd MMM yyyy");
    }
    
}

@*
private string GetBody(string body)
    {
        byte[] bytes = Convert.FromBase64String(body);
        return Encoding.UTF8.GetString(bytes);
    }
    
    private string StripHtmlTags(string html)
    {
        return Regex.Replace(html, "<.*?>", "");
    }
    
        if (response.Value != null)
        {
            var result = JsonConvert.DeserializeObject<CustomPostView>(response.Value.ToString());
            BlogPosts = result.allPosts;
            Console.WriteLine(result.pageCount);
            TotalPages = result.pageCount;
        }*/
        /*

        var command = new RetrievePostsCommand { Page = 1 };
        var response = await Mediator.Send(command);

        if (response.Value != null)
        {
            var result = JsonConvert.DeserializeObject<CustomPostView>(response.Value.ToString());
            BlogPosts = result.allPosts;
            Console.WriteLine(result.pageCount);
            TotalPages = result.pageCount;
            StateHasChanged();
        }
        *@

<!--
            <ul class="post-tags">
                <li>C#</li>
                <li>ADVANCED</li>
                <li>EXCLUSIVE CONTENT</li>
                <li>MICROSOFT</li>
            </ul>
            -->
<!--

<section class="blg-section">
    <div class="blg-child-node col">
        <div>dsaads</div>
    </div>
</section>
-->
@*
<section class="custom-section">
    <div class="child-node" style="flex-direction: column;">
        <h4 class="adjust" style="text-align: center; margin-bottom: 5px">the blog.</h4>
        <h2 class="adjust" style="text-align: center; font-weight: 500; margin-bottom: 7px;">Simple blog for simple writers.</h2>
        <h3 class="adjust" style="text-align: center; font-weight: 300;margin-bottom: 2rem;font-size: 1em;">The latest news directly from blazor server side.</h3>
        <div style="display: flex;flex-direction: column;gap: 20px;">
            <article class="front-page">
                <div class="content">
                    <span class="author">John Doe ●  20 May 2023</span>
                    <h2 class="title adjust">UX review presentations</h2>
                    <div class="description">How do you create compelling presentations that wow your colleagues and impress your managers?</div>
                    <ul class="tags">
                        <li>Design</li>
                        <li>Research</li>
                        <li>Presentation</li>
                    </ul>
                </div>
                <img style="width:100%;height: 100%" src="https://place-hold.it/1200x600"/>
            </article>
            <div class="sub-articles">
                @if (BlogPosts != null)
                {
                    @foreach (var post in BlogPosts)
                    {
                        <article class="front-page">
                            <img style="width:100%" width="300" height="200" src="https://place-hold.it/400x300"/>
                            <div class="mini-content">
                                <span class="author">@post.Username ● @GetDate(long.Parse(post.DateCreated))</span>
                                <h3 class="title adjust"><a href="/post/@post.Id">@post.Title</a></h3>
                                <div class="description">@StripHtmlTags(@post.Body).Substring(0, 80)...</div>
                                <ul class="tags">
                                    @if (post.Tags != null)
                                    {
                                        @foreach (var tag in post.Tags)
                                        {
                                            <li>@tag</li>
                                        }
                                    }
                                </ul>
                            </div>
                        </article>
                    }
                }
            </div>
        </div>
    </div>
</section>

@code {

    private List<Post> BlogPosts;

    protected override async Task OnInitializedAsync()
    {

        var command = new RetrievePostsCommand { Page = 1 };
        var result = await Mediator.Send(command);

        if (result.Value != null)
        {
            BlogPosts = JsonConvert.DeserializeObject<List<Post>>(result.Value.ToString());
        }
    }

    private string GetDate(long milliseconds)
    {
        DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeMilliseconds(milliseconds);

        return dateTimeOffset.ToString("dd MMM yyyy");
    }

    private string GetBody(string body)
    {
        byte[] bytes = Convert.FromBase64String(body);
        return Encoding.UTF8.GetString(bytes);
    }
    
    private static string StripHtmlTags(string html)
    {
        return Regex.Replace(html, "<.*?>", "");
    }
}
*/

*@