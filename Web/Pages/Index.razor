@page "/"
@using MediatR
@using Application.Features.Post
@using Application.Entities
@using Newtonsoft.Json
@using Application.Common
@using System.Security.Claims
@inject IMediator Mediator;
@inject NavigationManager NavManager;
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>SimpleBlog</PageTitle>

@if (IsInitLoaderLoading)
{
    <div class="loader">
        <span class="loader-design"></span>
    </div>
}
<section class="blg-section" style="padding-left: 25px;padding-right: 25px;">
    <div class="blg-child-node col" style="color: #eae7e1;align-items: center;justify-content: center;">
        <h1 class="section-title with-divider">
            <span style="color: #242424">#</span> LATEST POSTS
        </h1>
        @if (PostsData != null)
        {
            @foreach (var post in PostsData)
            {
                <article id="post-@post.Id" class="sub-post">
                    <div class="post-author"><a style="color:inherit;text-decoration: none;" href="@(NavManager.BaseUri + "account/" + post.UserId)">@post.Username</a></div>
                    <div class="post-date">@Utilities.GetDate(long.Parse(post.DateCreated))</div>
                    <div class="post-title"><a style="color:inherit;text-decoration: none;" href="@(NavManager.BaseUri + "post/" + @post.Id)">@post.Title</a></div>
                    <ul class="post-tags">
                        @if (post.Tags != null)
                        {
                            @foreach (var tag in post.Tags)
                            {
                                <li><a style="color:inherit;text-decoration: none;" href="@(NavManager.BaseUri + "post/tag/" + tag.ToUpper())">@tag.ToUpper()</a></li>
                            }
                        }
                    </ul>
                    
                    @if (post.UserId == UserId)
                    {
                        <div class="post-manager">
                            <div class="action"><a href="@(NavManager.BaseUri + "post/edit/" + post.Id)"><i class="fa-solid fa-pen-to-square"></i></a></div>
                            <div class="action"><a href="@(NavManager.BaseUri + "post/delete?postId=" + post.Id)"><i class="fa-solid fa-trash"></i></a></div>
                        </div>
                    }
                </article>
            }
            <div class="pagination" >
                @if (TotalPages != 0)
                {
                    if (Page > 1)
                    {
                        <a href="@(NavManager.BaseUri + "?page=" + (Page-1))" @onclick="UpdatePostsViewByPage">Previous</a>
                    }
                    
                    for (var i = PageRetrieval() <= 0 ? 1 : PageRetrieval() ; i < Page + 4 && i < TotalPages; i++)
                    {
                        if (Page == i) {
                                <a href="@(NavManager.BaseUri + "?page=" + i)" class="active" @onclick="UpdatePostsViewByPage">@(i)</a>
                        } else {
                                <a href="@(NavManager.BaseUri + "?page=" + i)" @onclick="UpdatePostsViewByPage">@(i)</a>
                         }
                    }
                    if (Page == TotalPages)
                    {
                        <a href="@(NavManager.BaseUri + "?page=" + TotalPages)" class="active" @onclick="UpdatePostsViewByPage">@(TotalPages)</a>
                    }
                    else
                    {
                        <a href="@(NavManager.BaseUri + "?page=" + TotalPages)" @onclick="UpdatePostsViewByPage">@(TotalPages)</a>
                    }
                    
                    if (Page != TotalPages)
                    {
                        <a href="@(NavManager.BaseUri + "?page=" + (Page+1))" @onclick="UpdatePostsViewByPage">></a>
                    }
                }
            </div>
        }
    </div>
</section>

@code {

    private int Page { get; set; } = 1;
    private int PreviousPage { get; set; }
    private int TotalPages { get; set; }

    private AuthenticationState? UserState;
    private string? UserId;
    private string? UserRole;

    private bool IsInitLoaderLoading = true;

    private List<Post> PostsData { get; set; }
    
    public class CustomPostView
    {
        public List<Post> AllPosts { get; set; }
        public int PageCount { get; set; }
    }

    private void UpdatePostView(List<Post> data)
    {
        PostsData = data;
    }

    private void UpdateTotalPage(int amount)
    {
        TotalPages = amount;
    }
    
    private int PageRetrieval()
    {
        var difference = TotalPages - Page;
        if (difference <= 4 )
        {
            return Page - (4 - difference);
        }
        return Page;
    }

    private async void UpdatePostsViewByPage()
    {
        await Task.Delay(50);
        var uri = new Uri(NavManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        if (queryParams["page"] != null)
        {
            Page = Page > 0 ? int.Parse(queryParams["page"]) : 1;
            Page = Page > TotalPages ? 1 : int.Parse(queryParams["page"]);
            if (PreviousPage == Page){ Console.WriteLine("yes"); return; }

            PreviousPage = Page;
            
            var command = new RetrievePostsCommand { Page = Page };
            var response = await Mediator.Send(command);
            var result = JsonConvert.DeserializeObject<CustomPostView>(response.Value.ToString());
            
            if (result != null)
            {
                IsInitLoaderLoading = false;
                UpdatePostView(result.AllPosts);
                StateHasChanged();
            }
        }
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UserState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (UserState != null)
            {
                UserId = UserState.User.FindFirstValue(ClaimTypes.NameIdentifier);
                UserRole = UserState.User.FindFirstValue(ClaimTypes.Role);
            }
        
            var uri = new Uri(NavManager.Uri);
            var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        
            if (queryParams["page"] != null)
            {
                Page = int.Parse(queryParams["Page"]);
                Page = Page > 0 ? int.Parse(queryParams["page"]) : 1;
            }
            else
            {
                Page = 1;
            }

            var command = new RetrievePostsCommand { Page = Page };
            var response = await Mediator.Send(command);
            var result = JsonConvert.DeserializeObject<CustomPostView>(response.Value.ToString());

            if (result != null)
            {
                UpdateTotalPage(result.PageCount);
                if (queryParams["page"] != null && Page > 1)
                {   
                    Page = Page > TotalPages ? 1 : int.Parse(queryParams["page"]);
                    UpdatePostsViewByPage();
                    return;
                }
                UpdatePostView(result.AllPosts);
                PreviousPage = Page;
                IsInitLoaderLoading = false;
                StateHasChanged();
            }
        }
    }
}